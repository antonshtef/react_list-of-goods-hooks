{"version":3,"sources":["App.tsx","index.tsx"],"names":["Sort","goodsFromServer","App","useState","Default","sortType","setSortType","isReverse","setIsReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,0EAfQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAKGD,K,WAAAA,E,uBAAAA,E,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAAKI,SAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACMC,EAhCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAKe,SACR,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAKiB,OACR,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAMcS,CACnBnB,EACAI,EACAE,GAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBACpB,CACE,WAAYlB,IAAaL,EAAKe,WAElCS,QAAS,kBAAMlB,EAAYN,EAAKe,WANlC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBACpB,CACE,WAAYlB,IAAaL,EAAKiB,SAElCO,QAAS,kBAAMlB,EAAYN,EAAKiB,SANlC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBACpB,CACE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAcD,IAN/B,sBAWEF,GAAYE,IACZ,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAYN,EAAKI,SACjBI,GAAa,IALjB,sBAcJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCrHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7862f509.chunk.js","sourcesContent":["// import React from 'react';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype GoodsType = string[];\n\nenum Sort {\n  Default = '',\n  Alphabet = 'by alphabet',\n  Length = 'by length',\n}\n\nfunction getPreparedGoods(\n  goods: GoodsType,\n  sortType: string,\n  isReverse: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case Sort.Alphabet:\n          return good1.localeCompare(good2);\n\n        case Sort.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(Sort.Default);\n  const [isReverse, setIsReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortType,\n    isReverse,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info',\n            {\n              'is-light': sortType !== Sort.Alphabet,\n            })}\n          onClick={() => setSortType(Sort.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success',\n            {\n              'is-light': sortType !== Sort.Length,\n            })}\n          onClick={() => setSortType(Sort.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning',\n            {\n              'is-light': !isReverse,\n            })}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(Sort.Default);\n              setIsReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}